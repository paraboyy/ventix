<script setup>
import { ref, onMounted } from "vue";
import { useRoute, useRouter } from "vue-router";
import Navbar from "../../components/Navbar/participan.vue";
import FooterView from "../../components/footer.vue";
import axios from "axios";

const route = useRoute();
const router = useRouter();
const eventData = ref(null);
const error = ref(null);

// Ticket quantities, initialized to 0 for each ticket type
const ticketQuantities = ref({});

// Fetch event data
const fetchEvent = async () => {
  const eventId = route.params.eventId;

  try {
    const response = await axios.get(`/events/${eventId}`);
    if (!response.data.error && response.data.data.length > 0) {
      eventData.value = response.data.data[0]; // Akses event pertama di dalam array data
      // Inisialisasi ticketQuantities berdasarkan tiket yang tersedia
      eventData.value.tickets.forEach(ticket => {
        ticketQuantities.value[ticket._id] = 0;  // Setel jumlah awal tiket menjadi 0
      });
    } else {
      throw new Error(response.data.message);
    }
  } catch (err) {
    error.value = err.message || "Gagal memuat data event.";
  }
};

// Calculate total price based on selected quantities
const getTotalPrice = () => {
  return eventData.value.tickets.reduce((total, ticket) => {
    return total + ticket.price * ticketQuantities.value[ticket._id];
  }, 0);
};

// Handle payment
const handlePayNow = async () => {
  const selectedTickets = eventData.value.tickets.filter(ticket => ticketQuantities.value[ticket._id] > 0);

  if (selectedTickets.length === 0) {
    alert("Silakan pilih setidaknya satu tiket.");
    return;
  }

  try {
    const paymentResponse = await axios.post("/payments", {
      eventId: eventData.value._id,
      tickets: selectedTickets.map(ticket => ({
        ticketId: ticket._id,
        quantity: ticketQuantities.value[ticket._id],
        price: ticket.price,
      })),
      amount: getTotalPrice(),
    });

    if (!paymentResponse.data.error) {
      alert("Pembayaran berhasil!");
      router.push("/payment-success");
    } else {
      throw new Error(paymentResponse.data.message);
    }
  } catch (err) {
    alert(err.message || "Pembayaran gagal.");
  }
};

// Fetch event data on mounted
onMounted(fetchEvent);
</script>

<template>
  <Navbar />
  <div class="container mt-4">
    <div v-if="error" class="alert alert-danger">{{ error }}</div>
    <div v-else-if="!eventData" class="text-center">
      <p>Loading event details...</p>
    </div>
    <div v-else>
      <div class="row">
        <!-- Main Content -->
        <div class="col-lg-8">
          <!-- Event Details -->
          <div>
            <h2 class="fw-bold">{{ eventData.title }}</h2>
            <p><strong>Date and Time:</strong> {{ new Date(eventData.date).toLocaleString() }}</p>
            <p><strong>Place:</strong> {{ eventData.venueName }}</p>
            <p>{{ eventData.about }}</p>
          </div>

          <!-- Contact Information -->
          <div class="card p-4 mb-4">
            <h5 class="fw-bold">Contact Information</h5>
            <div class="row mt-3">
              <div class="col-md-6">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Enter your email" />
              </div>
              <div class="col-md-6">
                <label for="phone" class="form-label">Phone Number</label>
                <input type="text" class="form-control" id="phone" placeholder="Enter your phone number" />
              </div>
            </div>
          </div>

          <!-- Ticket Information -->
          <div class="card p-4">
            <h5 class="fw-bold">Tickets</h5>
            <div v-for="ticket in eventData.tickets" :key="ticket._id" class="mb-3">
              <div class="d-flex justify-content-between">
                <span>{{ ticket.type }}</span>
                <span>{{ ticket.price.toLocaleString() }} IDR</span>
              </div>
              <div class="d-flex justify-content-between">
                <label :for="`ticket-${ticket._id}`" class="form-label">Quantity</label>
                <input
                  type="number"
                  v-model.number="ticketQuantities.value[ticket._id]"
                  :id="`ticket-${ticket._id}`"
                  class="form-control"
                  min="0"
                  :max="ticket.stock"  <!-- Menyesuaikan dengan stok yang tersedia -->
                />
              </div>
            </div>
          </div>
        </div>

        <!-- Summary Section -->
        <div class="col-lg-4">
          <div class="card p-4">
            <h5 class="fw-bold">Summary</h5>
            <div class="d-flex justify-content-between">
              <span>Total Tickets</span>
              <span>{{ eventData.tickets.reduce((total, ticket) => total + ticketQuantities.value[ticket._id], 0) }}</span>
            </div>
            <div class="d-flex justify-content-between fw-bold">
              <span>Total Price</span>
              <span>{{ getTotalPrice().toLocaleString() }} IDR</span>
            </div>
            <button class="btn btn-warning w-100 mt-4" @click="handlePayNow">Pay Now</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <FooterView />
</template>
