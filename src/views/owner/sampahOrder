<script setup>
    import { ref, onMounted } from "vue";
    import axios from "axios";
    import Navbar from "../../components/Navbar/owner.vue";
    import Sidebar from "../../components/Sidebar/sidebarOwner.vue";
    
    // State untuk menyimpan data dari API
    const orders = ref([]);
    
    // Fungsi untuk mengambil data dari API utama
    const fetchOrders = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) {
          console.error("Token tidak ditemukan di localStorage");
          return;
        }
    
        const response = await axios.get("/participant/get-checkout-event", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
    
        if (response.data && Array.isArray(response.data)) {
          const enrichedOrders = await Promise.all(
            response.data.map(async (order) => {
              // Membuat FormData untuk request user
              const formData = new FormData();
              formData.append("id", order.user_id.$oid);
    
              //   console.log("User id:", formData);
              console.log("User id:", order.user_id.$oid);
    
              const userResponse = await axios.get("/user/", formData, {
                headers: {
                  "Content-Type": "multipart/form-data",
                  //   Authorization: `Bearer ${token}`,
                },
              });
    
              const eventResponse = await axios.get(`/participant/get-event/${order.event.$oid}`, {
                headers: {
                  Authorization: `Bearer ${token}`,
                },
              });
    
              return {
                id: order._id.$oid,
                customerName: `${userResponse.data.firstName || "Unknown"} ${userResponse.data.lastName || ""}`,
                eventName: eventResponse.data.name || "Unknown Event",
                paymentStatus: order.payment_status ? "Paid" : "Pending",
                createdAt: new Date(order.createdAt.$date).toLocaleDateString(),
              };
            })
          );
    
          orders.value = enrichedOrders;
        } else {
          console.error("Data orders tidak valid:", response.data);
        }
      } catch (error) {
        console.error("Error fetching orders:", error);
      }
    };
    
    // Lifecycle
    onMounted(() => {
      fetchOrders();
    });
    </script>
    
    <template>
      <Navbar />
      <div class="container-fluid">
        <div class="row">
          <Sidebar />
    
          <div class="col-md-10 mt-1">
            <div class="container table-container">
              <h3 class="fw-bold mt-4">List Order Ticket</h3>
              <table class="table shadow rounded mt-4">
                <thead>
                  <tr>
                    <th>Order ID</th>
                    <th>Customer Name</th>
                    <th>Event Name</th>
                    <th>Payment Status</th>
                    <th>Order Date</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-for="order in orders" :key="order.id">
                    <td>{{ order.id }}</td>
                    <td>{{ order.customerName }}</td>
                    <td>{{ order.eventName }}</td>
                    <td>
                      <span
                        :class="{
                          'badge bg-success': order.paymentStatus === 'Paid',
                          'badge bg-warning text-dark': order.paymentStatus === 'Pending',
                        }"
                      >
                        {{ order.paymentStatus }}
                      </span>
                    </td>
                    <td>{{ order.createdAt }}</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </template>
    